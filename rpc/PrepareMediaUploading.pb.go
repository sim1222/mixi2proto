// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        v5.29.2
// source: PrepareMediaUploading.proto

package rpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PrepareMediaUploadingRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FilePath string `protobuf:"bytes,1,opt,name=file_path,json=filePath,proto3" json:"file_path,omitempty"`
	FileSize uint32 `protobuf:"varint,2,opt,name=file_size,json=fileSize,proto3" json:"file_size,omitempty"`
	Nazo     uint32 `protobuf:"varint,3,opt,name=nazo,proto3" json:"nazo,omitempty"` // value=2
}

func (x *PrepareMediaUploadingRequest) Reset() {
	*x = PrepareMediaUploadingRequest{}
	mi := &file_PrepareMediaUploading_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMediaUploadingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMediaUploadingRequest) ProtoMessage() {}

func (x *PrepareMediaUploadingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_PrepareMediaUploading_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMediaUploadingRequest.ProtoReflect.Descriptor instead.
func (*PrepareMediaUploadingRequest) Descriptor() ([]byte, []int) {
	return file_PrepareMediaUploading_proto_rawDescGZIP(), []int{0}
}

func (x *PrepareMediaUploadingRequest) GetFilePath() string {
	if x != nil {
		return x.FilePath
	}
	return ""
}

func (x *PrepareMediaUploadingRequest) GetFileSize() uint32 {
	if x != nil {
		return x.FileSize
	}
	return 0
}

func (x *PrepareMediaUploadingRequest) GetNazo() uint32 {
	if x != nil {
		return x.Nazo
	}
	return 0
}

type Header struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Header) Reset() {
	*x = Header{}
	mi := &file_PrepareMediaUploading_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Header) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Header) ProtoMessage() {}

func (x *Header) ProtoReflect() protoreflect.Message {
	mi := &file_PrepareMediaUploading_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Header.ProtoReflect.Descriptor instead.
func (*Header) Descriptor() ([]byte, []int) {
	return file_PrepareMediaUploading_proto_rawDescGZIP(), []int{1}
}

func (x *Header) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Header) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type S3Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UploadUrl string  `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	Method    string  `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Header    *Header `protobuf:"bytes,3,opt,name=header,proto3" json:"header,omitempty"`
}

func (x *S3Request) Reset() {
	*x = S3Request{}
	mi := &file_PrepareMediaUploading_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *S3Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*S3Request) ProtoMessage() {}

func (x *S3Request) ProtoReflect() protoreflect.Message {
	mi := &file_PrepareMediaUploading_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use S3Request.ProtoReflect.Descriptor instead.
func (*S3Request) Descriptor() ([]byte, []int) {
	return file_PrepareMediaUploading_proto_rawDescGZIP(), []int{2}
}

func (x *S3Request) GetUploadUrl() string {
	if x != nil {
		return x.UploadUrl
	}
	return ""
}

func (x *S3Request) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *S3Request) GetHeader() *Header {
	if x != nil {
		return x.Header
	}
	return nil
}

type PrepareMediaUploadingResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MediaUuid string     `protobuf:"bytes,1,opt,name=media_uuid,json=mediaUuid,proto3" json:"media_uuid,omitempty"`
	S3Request *S3Request `protobuf:"bytes,2,opt,name=s3_request,json=s3Request,proto3" json:"s3_request,omitempty"`
}

func (x *PrepareMediaUploadingResponse) Reset() {
	*x = PrepareMediaUploadingResponse{}
	mi := &file_PrepareMediaUploading_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PrepareMediaUploadingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrepareMediaUploadingResponse) ProtoMessage() {}

func (x *PrepareMediaUploadingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_PrepareMediaUploading_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrepareMediaUploadingResponse.ProtoReflect.Descriptor instead.
func (*PrepareMediaUploadingResponse) Descriptor() ([]byte, []int) {
	return file_PrepareMediaUploading_proto_rawDescGZIP(), []int{3}
}

func (x *PrepareMediaUploadingResponse) GetMediaUuid() string {
	if x != nil {
		return x.MediaUuid
	}
	return ""
}

func (x *PrepareMediaUploadingResponse) GetS3Request() *S3Request {
	if x != nil {
		return x.S3Request
	}
	return nil
}

var File_PrepareMediaUploading_proto protoreflect.FileDescriptor

var file_PrepareMediaUploading_proto_rawDesc = []byte{
	0x0a, 0x1b, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x69,
	0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x69, 0x6d, 0x31, 0x32, 0x32, 0x32,
	0x2e, 0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x22,
	0x6c, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55,
	0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1b, 0x0a, 0x09,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x7a,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x6e, 0x61, 0x7a, 0x6f, 0x22, 0x30, 0x0a,
	0x06, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22,
	0x84, 0x01, 0x0a, 0x09, 0x53, 0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x09, 0x75, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x55, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x40, 0x0a, 0x06, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x73, 0x69, 0x6d, 0x31, 0x32, 0x32, 0x32, 0x2e, 0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x52, 0x06,
	0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x22, 0x8a, 0x01, 0x0a, 0x1d, 0x50, 0x72, 0x65, 0x70, 0x61,
	0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x64, 0x69,
	0x61, 0x5f, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x65,
	0x64, 0x69, 0x61, 0x55, 0x75, 0x69, 0x64, 0x12, 0x4a, 0x0a, 0x0a, 0x73, 0x33, 0x5f, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x69, 0x6f,
	0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x69, 0x6d, 0x31, 0x32, 0x32, 0x32, 0x2e,
	0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x53,
	0x33, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x09, 0x73, 0x33, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x32, 0xbb, 0x01, 0x0a, 0x1c, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d,
	0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x9a, 0x01, 0x0a, 0x15, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x3e,
	0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x69, 0x6d, 0x31, 0x32,
	0x32, 0x32, 0x2e, 0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x3f,
	0x2e, 0x69, 0x6f, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x73, 0x69, 0x6d, 0x31, 0x32,
	0x32, 0x32, 0x2e, 0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x65, 0x64, 0x69, 0x61, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22,
	0x00, 0x42, 0x23, 0x5a, 0x21, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x73, 0x69, 0x6d, 0x31, 0x32, 0x32, 0x32, 0x2f, 0x6d, 0x69, 0x78, 0x69, 0x32, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2f, 0x72, 0x70, 0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_PrepareMediaUploading_proto_rawDescOnce sync.Once
	file_PrepareMediaUploading_proto_rawDescData = file_PrepareMediaUploading_proto_rawDesc
)

func file_PrepareMediaUploading_proto_rawDescGZIP() []byte {
	file_PrepareMediaUploading_proto_rawDescOnce.Do(func() {
		file_PrepareMediaUploading_proto_rawDescData = protoimpl.X.CompressGZIP(file_PrepareMediaUploading_proto_rawDescData)
	})
	return file_PrepareMediaUploading_proto_rawDescData
}

var file_PrepareMediaUploading_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_PrepareMediaUploading_proto_goTypes = []any{
	(*PrepareMediaUploadingRequest)(nil),  // 0: io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingRequest
	(*Header)(nil),                        // 1: io.github.sim1222.mixi2proto.rpc.Header
	(*S3Request)(nil),                     // 2: io.github.sim1222.mixi2proto.rpc.S3Request
	(*PrepareMediaUploadingResponse)(nil), // 3: io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingResponse
}
var file_PrepareMediaUploading_proto_depIdxs = []int32{
	1, // 0: io.github.sim1222.mixi2proto.rpc.S3Request.header:type_name -> io.github.sim1222.mixi2proto.rpc.Header
	2, // 1: io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingResponse.s3_request:type_name -> io.github.sim1222.mixi2proto.rpc.S3Request
	0, // 2: io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingService.PrepareMediaUploading:input_type -> io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingRequest
	3, // 3: io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingService.PrepareMediaUploading:output_type -> io.github.sim1222.mixi2proto.rpc.PrepareMediaUploadingResponse
	3, // [3:4] is the sub-list for method output_type
	2, // [2:3] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_PrepareMediaUploading_proto_init() }
func file_PrepareMediaUploading_proto_init() {
	if File_PrepareMediaUploading_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_PrepareMediaUploading_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_PrepareMediaUploading_proto_goTypes,
		DependencyIndexes: file_PrepareMediaUploading_proto_depIdxs,
		MessageInfos:      file_PrepareMediaUploading_proto_msgTypes,
	}.Build()
	File_PrepareMediaUploading_proto = out.File
	file_PrepareMediaUploading_proto_rawDesc = nil
	file_PrepareMediaUploading_proto_goTypes = nil
	file_PrepareMediaUploading_proto_depIdxs = nil
}
